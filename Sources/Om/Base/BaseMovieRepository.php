<?php
/**
 * Generated By ColibriORM Generator
 * @author Ivan Gontarenko
*/

namespace ColibriLabs\Database\Om\Base;

use Colibri\Core\Repository;
use Colibri\Query\Statement\Comparison\Cmp;
use Colibri\Query\Statement\OrderBy;
use ColibriLabs\Database\Om\MovieRepository;
use ColibriLabs\Database\Om\Movie;
use Colibri\Core\ResultSet\ResultSetIterator;

/**
 * Magic methods for query-builder and access to the fields data
 *
 * @method Movie findOneById($id);
 * @method ResultSetIterator findById($id);
 * @method MovieRepository filterById($id, $cmp = Cmp::EQ);
 * @method MovieRepository orderById($vector = OrderBy::ASC);
 * @method MovieRepository groupById();
 * @method Movie findOneByCollectionId($collection_id);
 * @method ResultSetIterator findByCollectionId($collection_id);
 * @method MovieRepository filterByCollectionId($collection_id, $cmp = Cmp::EQ);
 * @method MovieRepository orderByCollectionId($vector = OrderBy::ASC);
 * @method MovieRepository groupByCollectionId();
 * @method Movie findOneByTmdbId($tmdb_id);
 * @method ResultSetIterator findByTmdbId($tmdb_id);
 * @method MovieRepository filterByTmdbId($tmdb_id, $cmp = Cmp::EQ);
 * @method MovieRepository orderByTmdbId($vector = OrderBy::ASC);
 * @method MovieRepository groupByTmdbId();
 * @method Movie findOneByImdbId($imdb_id);
 * @method ResultSetIterator findByImdbId($imdb_id);
 * @method MovieRepository filterByImdbId($imdb_id, $cmp = Cmp::EQ);
 * @method MovieRepository orderByImdbId($vector = OrderBy::ASC);
 * @method MovieRepository groupByImdbId();
 * @method Movie findOneByBudget($budget);
 * @method ResultSetIterator findByBudget($budget);
 * @method MovieRepository filterByBudget($budget, $cmp = Cmp::EQ);
 * @method MovieRepository orderByBudget($vector = OrderBy::ASC);
 * @method MovieRepository groupByBudget();
 * @method Movie findOneByRevenue($revenue);
 * @method ResultSetIterator findByRevenue($revenue);
 * @method MovieRepository filterByRevenue($revenue, $cmp = Cmp::EQ);
 * @method MovieRepository orderByRevenue($vector = OrderBy::ASC);
 * @method MovieRepository groupByRevenue();
 * @method Movie findOneByRuntime($runtime);
 * @method ResultSetIterator findByRuntime($runtime);
 * @method MovieRepository filterByRuntime($runtime, $cmp = Cmp::EQ);
 * @method MovieRepository orderByRuntime($vector = OrderBy::ASC);
 * @method MovieRepository groupByRuntime();
 * @method Movie findOneByAdult($adult);
 * @method ResultSetIterator findByAdult($adult);
 * @method MovieRepository filterByAdult($adult, $cmp = Cmp::EQ);
 * @method MovieRepository orderByAdult($vector = OrderBy::ASC);
 * @method MovieRepository groupByAdult();
 * @method Movie findOneByReleaseDate($release_date);
 * @method ResultSetIterator findByReleaseDate($release_date);
 * @method MovieRepository filterByReleaseDate($release_date, $cmp = Cmp::EQ);
 * @method MovieRepository orderByReleaseDate($vector = OrderBy::ASC);
 * @method MovieRepository groupByReleaseDate();
 * @method Movie findOneByTitle($title);
 * @method ResultSetIterator findByTitle($title);
 * @method MovieRepository filterByTitle($title, $cmp = Cmp::EQ);
 * @method MovieRepository orderByTitle($vector = OrderBy::ASC);
 * @method MovieRepository groupByTitle();
 * @method Movie findOneByOriginalTitle($original_title);
 * @method ResultSetIterator findByOriginalTitle($original_title);
 * @method MovieRepository filterByOriginalTitle($original_title, $cmp = Cmp::EQ);
 * @method MovieRepository orderByOriginalTitle($vector = OrderBy::ASC);
 * @method MovieRepository groupByOriginalTitle();
 * @method Movie findOneByIsoLanguage($iso_language);
 * @method ResultSetIterator findByIsoLanguage($iso_language);
 * @method MovieRepository filterByIsoLanguage($iso_language, $cmp = Cmp::EQ);
 * @method MovieRepository orderByIsoLanguage($vector = OrderBy::ASC);
 * @method MovieRepository groupByIsoLanguage();
 * @method Movie findOneByOverview($overview);
 * @method ResultSetIterator findByOverview($overview);
 * @method MovieRepository filterByOverview($overview, $cmp = Cmp::EQ);
 * @method MovieRepository orderByOverview($vector = OrderBy::ASC);
 * @method MovieRepository groupByOverview();
 * @method Movie findOneByTagline($tagline);
 * @method ResultSetIterator findByTagline($tagline);
 * @method MovieRepository filterByTagline($tagline, $cmp = Cmp::EQ);
 * @method MovieRepository orderByTagline($vector = OrderBy::ASC);
 * @method MovieRepository groupByTagline();
 * @method Movie findOneByTmdbVotes($tmdb_votes);
 * @method ResultSetIterator findByTmdbVotes($tmdb_votes);
 * @method MovieRepository filterByTmdbVotes($tmdb_votes, $cmp = Cmp::EQ);
 * @method MovieRepository orderByTmdbVotes($vector = OrderBy::ASC);
 * @method MovieRepository groupByTmdbVotes();
 * @method Movie findOneByTmdbRating($tmdb_rating);
 * @method ResultSetIterator findByTmdbRating($tmdb_rating);
 * @method MovieRepository filterByTmdbRating($tmdb_rating, $cmp = Cmp::EQ);
 * @method MovieRepository orderByTmdbRating($vector = OrderBy::ASC);
 * @method MovieRepository groupByTmdbRating();
 * @method Movie findOneByImdbVotes($imdb_votes);
 * @method ResultSetIterator findByImdbVotes($imdb_votes);
 * @method MovieRepository filterByImdbVotes($imdb_votes, $cmp = Cmp::EQ);
 * @method MovieRepository orderByImdbVotes($vector = OrderBy::ASC);
 * @method MovieRepository groupByImdbVotes();
 * @method Movie findOneByImdbRating($imdb_rating);
 * @method ResultSetIterator findByImdbRating($imdb_rating);
 * @method MovieRepository filterByImdbRating($imdb_rating, $cmp = Cmp::EQ);
 * @method MovieRepository orderByImdbRating($vector = OrderBy::ASC);
 * @method MovieRepository groupByImdbRating();
 * @method Movie findOneByMpaaRating($mpaa_rating);
 * @method ResultSetIterator findByMpaaRating($mpaa_rating);
 * @method MovieRepository filterByMpaaRating($mpaa_rating, $cmp = Cmp::EQ);
 * @method MovieRepository orderByMpaaRating($vector = OrderBy::ASC);
 * @method MovieRepository groupByMpaaRating();
 * @method Movie findOneByVersion($version);
 * @method ResultSetIterator findByVersion($version);
 * @method MovieRepository filterByVersion($version, $cmp = Cmp::EQ);
 * @method MovieRepository orderByVersion($vector = OrderBy::ASC);
 * @method MovieRepository groupByVersion();
 * @method Movie findOneByCreated($created);
 * @method ResultSetIterator findByCreated($created);
 * @method MovieRepository filterByCreated($created, $cmp = Cmp::EQ);
 * @method MovieRepository orderByCreated($vector = OrderBy::ASC);
 * @method MovieRepository groupByCreated();
 * @method Movie findOneByUpdated($updated);
 * @method ResultSetIterator findByUpdated($updated);
 * @method MovieRepository filterByUpdated($updated, $cmp = Cmp::EQ);
 * @method MovieRepository orderByUpdated($vector = OrderBy::ASC);
 * @method MovieRepository groupByUpdated();
*/

class BaseMovieRepository extends Repository
{
  
  /**
   * BaseMovieRepository constructor.
   */
  public function __construct()
  {
    parent::__construct(Movie::class);
  }

}
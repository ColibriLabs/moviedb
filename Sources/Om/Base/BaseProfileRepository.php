<?php
/**
 * Generated By ColibriORM Generator
 * @author Ivan Gontarenko
*/

namespace ColibriLabs\Database\Om\Base;

use Colibri\Core\Repository;
use Colibri\Query\Statement\Comparison\Cmp;
use Colibri\Query\Statement\OrderBy;
use ColibriLabs\Database\Om\ProfileRepository;
use ColibriLabs\Database\Om\Profile;
use Colibri\Core\ResultSet\ResultSetIterator;

/**
 * Magic methods for query-builder and access to the fields data
 *
 * @method Profile findOneById($id);
 * @method ResultSetIterator findById($id);
 * @method ProfileRepository filterById($id, $cmp = Cmp::EQ);
 * @method ProfileRepository orderById($vector = OrderBy::ASC);
 * @method ProfileRepository groupById();
 * @method Profile findOneByTmdbId($tmdb_id);
 * @method ResultSetIterator findByTmdbId($tmdb_id);
 * @method ProfileRepository filterByTmdbId($tmdb_id, $cmp = Cmp::EQ);
 * @method ProfileRepository orderByTmdbId($vector = OrderBy::ASC);
 * @method ProfileRepository groupByTmdbId();
 * @method Profile findOneByImdbId($imdb_id);
 * @method ResultSetIterator findByImdbId($imdb_id);
 * @method ProfileRepository filterByImdbId($imdb_id, $cmp = Cmp::EQ);
 * @method ProfileRepository orderByImdbId($vector = OrderBy::ASC);
 * @method ProfileRepository groupByImdbId();
 * @method Profile findOneByName($name);
 * @method ResultSetIterator findByName($name);
 * @method ProfileRepository filterByName($name, $cmp = Cmp::EQ);
 * @method ProfileRepository orderByName($vector = OrderBy::ASC);
 * @method ProfileRepository groupByName();
 * @method Profile findOneByBiography($biography);
 * @method ResultSetIterator findByBiography($biography);
 * @method ProfileRepository filterByBiography($biography, $cmp = Cmp::EQ);
 * @method ProfileRepository orderByBiography($vector = OrderBy::ASC);
 * @method ProfileRepository groupByBiography();
 * @method Profile findOneByAdult($adult);
 * @method ResultSetIterator findByAdult($adult);
 * @method ProfileRepository filterByAdult($adult, $cmp = Cmp::EQ);
 * @method ProfileRepository orderByAdult($vector = OrderBy::ASC);
 * @method ProfileRepository groupByAdult();
 * @method Profile findOneBySex($sex);
 * @method ResultSetIterator findBySex($sex);
 * @method ProfileRepository filterBySex($sex, $cmp = Cmp::EQ);
 * @method ProfileRepository orderBySex($vector = OrderBy::ASC);
 * @method ProfileRepository groupBySex();
 * @method Profile findOneByBirthday($birthday);
 * @method ResultSetIterator findByBirthday($birthday);
 * @method ProfileRepository filterByBirthday($birthday, $cmp = Cmp::EQ);
 * @method ProfileRepository orderByBirthday($vector = OrderBy::ASC);
 * @method ProfileRepository groupByBirthday();
 * @method Profile findOneByDeathday($deathday);
 * @method ResultSetIterator findByDeathday($deathday);
 * @method ProfileRepository filterByDeathday($deathday, $cmp = Cmp::EQ);
 * @method ProfileRepository orderByDeathday($vector = OrderBy::ASC);
 * @method ProfileRepository groupByDeathday();
 * @method Profile findOneByVersion($version);
 * @method ResultSetIterator findByVersion($version);
 * @method ProfileRepository filterByVersion($version, $cmp = Cmp::EQ);
 * @method ProfileRepository orderByVersion($vector = OrderBy::ASC);
 * @method ProfileRepository groupByVersion();
 * @method Profile findOneByCreated($created);
 * @method ResultSetIterator findByCreated($created);
 * @method ProfileRepository filterByCreated($created, $cmp = Cmp::EQ);
 * @method ProfileRepository orderByCreated($vector = OrderBy::ASC);
 * @method ProfileRepository groupByCreated();
 * @method Profile findOneByUpdated($updated);
 * @method ResultSetIterator findByUpdated($updated);
 * @method ProfileRepository filterByUpdated($updated, $cmp = Cmp::EQ);
 * @method ProfileRepository orderByUpdated($vector = OrderBy::ASC);
 * @method ProfileRepository groupByUpdated();
*/

class BaseProfileRepository extends Repository
{
  
  /**
   * BaseProfileRepository constructor.
   */
  public function __construct()
  {
    parent::__construct(Profile::class);
  }

}
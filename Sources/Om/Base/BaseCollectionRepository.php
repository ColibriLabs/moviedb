<?php
/**
 * Generated By ColibriORM Generator
 * @author Ivan Gontarenko
*/

namespace ColibriLabs\Database\Om\Base;

use Colibri\Core\Repository;
use Colibri\Query\Statement\Comparison\Cmp;
use Colibri\Query\Statement\OrderBy;
use ColibriLabs\Database\Om\CollectionRepository;
use ColibriLabs\Database\Om\Collection;
use Colibri\Core\ResultSet\ResultSetIterator;

/**
 * Magic methods for query-builder and access to the fields data
 *
 * @method Collection findOneById($id);
 * @method ResultSetIterator findById($id);
 * @method CollectionRepository filterById($id, $cmp = Cmp::EQ);
 * @method CollectionRepository orderById($vector = OrderBy::ASC);
 * @method CollectionRepository groupById();
 * @method Collection findOneByTmdbId($tmdb_id);
 * @method ResultSetIterator findByTmdbId($tmdb_id);
 * @method CollectionRepository filterByTmdbId($tmdb_id, $cmp = Cmp::EQ);
 * @method CollectionRepository orderByTmdbId($vector = OrderBy::ASC);
 * @method CollectionRepository groupByTmdbId();
 * @method Collection findOneByName($name);
 * @method ResultSetIterator findByName($name);
 * @method CollectionRepository filterByName($name, $cmp = Cmp::EQ);
 * @method CollectionRepository orderByName($vector = OrderBy::ASC);
 * @method CollectionRepository groupByName();
 * @method Collection findOneByVersion($version);
 * @method ResultSetIterator findByVersion($version);
 * @method CollectionRepository filterByVersion($version, $cmp = Cmp::EQ);
 * @method CollectionRepository orderByVersion($vector = OrderBy::ASC);
 * @method CollectionRepository groupByVersion();
 * @method Collection findOneByCreated($created);
 * @method ResultSetIterator findByCreated($created);
 * @method CollectionRepository filterByCreated($created, $cmp = Cmp::EQ);
 * @method CollectionRepository orderByCreated($vector = OrderBy::ASC);
 * @method CollectionRepository groupByCreated();
 * @method Collection findOneByUpdated($updated);
 * @method ResultSetIterator findByUpdated($updated);
 * @method CollectionRepository filterByUpdated($updated, $cmp = Cmp::EQ);
 * @method CollectionRepository orderByUpdated($vector = OrderBy::ASC);
 * @method CollectionRepository groupByUpdated();
*/

class BaseCollectionRepository extends Repository
{
  
  /**
   * BaseCollectionRepository constructor.
   */
  public function __construct()
  {
    parent::__construct(Collection::class);
  }

}